service: pastiche-api
useDotenv: true

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

disabledDeprecations: CLI_OPTIONS_SCHEMA
provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-2
  lambdaHashingVersion: 20201221

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${env:PORTRAITS_TABLE_NAME}
    overlaysTable: ${env:OVERLAYS_TABLE_NAME}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource: "arn:aws:dynamodb:us-east-2:*:*"

functions:
  create:
    handler: create.main
    events:
      - http:
          path: portraits
          method: post
          cors: true
          authorizer: aws_iam

  create-overlay:
    handler: create-overlay.main
    events:
      - http:
          path: overlays
          method: post
          cors: true
          authorizer: aws_iam

  list-overlays:
    handler: list-overlays.main
    events:
      - http:
          path: overlays
          method: get
          cors: true
          authorizer: aws_iam

  pastiche-list:
    handler: pastiche-list.main
    events:
      - http:
          path: pastiche/{overlay}
          method: get
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    events:
      - http:
          path: portraits/{id}
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
